set nocompatible             " be iMproved, required
filetype plugin indent on    " required
syntax on                    " Enable syntax highlighting.
set omnifunc=syntaxcomplete#Complete " Enable syntax completions

set background=dark
colorscheme starkiller
let g:indentLine_setColors = 0
let g:indentLine_char = '▏'

set autoindent             " Indent according to previous line.
set expandtab              " Use spaces instead of tabs.
set softtabstop =4         " Tab key indents by 4 spaces.
set shiftwidth  =4         " >> indents by 4 spaces.
set shiftround             " >> indents to next multiple of 'shiftwidth'.

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
set laststatus  =2         " Always show statusline.
set display     =lastline  " Show as much as possible of the last line.
set number                 " Show line numbers

set noshowmode             " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.
set wildmenu               " Enhanced command-line completion

set incsearch              " Highlight while searching with / or ?.
set hlsearch               " Keep matches highlighted.

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =400       " Only highlight the first ### columns.

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±,eol:¬'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.,eol:¬'
endif

" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#handling-backup-swap-undo-and-viminfo-files
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap//
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo

" set <leader>
let mapleader = ' '

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" https://github.com/mhinz/vim-galore#quickly-add-empty-lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>']

" Keymappings for :term
tnoremap <silent> <C-h> <C-W>h
tnoremap <silent> <C-j> <C-W>j
tnoremap <silent> <C-k> <C-W>k
tnoremap <silent> <C-l> <C-W>l
tnoremap <leader><Esc> <C-w>N

" enable fzf
set rtp+=/usr/local/opt/fzf

" airline config
let g:airline_theme='wombat'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter= 'unique_tail_improved'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1

" editorconfig compatibility with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" git gutter
if exists('&signcolumn')
    set signcolumn=yes
endif

" ALE
let g:ale_sign_error = '🔥'
let g:ale_javascript_eslint_suppress_missing_config = 10
let g:ale_linters = {
\   'javascript': ['eslint', 'flow'],
\   'markdown': [],
\   'python': ['flake8'],
\}

" ALE fix-on-save
let g:ale_fix_on_save = 1

" ALE completion
let g:ale_completion_enabled = 1

" Use vim-go
let g:polyglot_disabled = ['go']

" diminactive
let g:diminactive_use_syntax = 1
let g:diminactive_enable_focus = 1

" vim-javascript settings
let g:javascript_plugin_flow = 1

" vim-markdown
let g:vim_markdown_conceal = 0
let g:vim_markdown_folding_disabled = 1

" Other customizations
" Many stolen from https://github.com/mhinz/vim-galore

autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline

if empty($TMUX)
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
endif

" Abbreviations

iab <expr> dts strftime("%F")

iab #! #!/usr/bin/env
